import * as core from '@actions/core'
import {context, GitHub} from '@actions/github'
import NetlifyAPI from 'netlify'
import * as path from 'path'
import {defaultInputs, Inputs} from './inputs'

const commentIdentifierString =
  '<!-- NETLIFY DEPLOY COMMENT GENERATED BY ACTIONS_NETLIFY -->'

async function findIssueComment(
  githubClient: GitHub
): Promise<number | undefined> {
  const listCommentsRes = await githubClient.issues.listComments({
    owner: context.issue.owner,
    repo: context.issue.repo,
    // eslint-disable-next-line @typescript-eslint/camelcase
    issue_number: context.issue.number
  })

  const comments = listCommentsRes.data
  for (const comment of comments) {
    // If comment contains the comment identifier
    if (comment.body.includes(commentIdentifierString)) {
      return comment.id
    }
  }
  return undefined
}

async function run(inputs: Inputs): Promise<void> {
  try {
    const netlifyAuthToken = process.env.NETLIFY_AUTH_TOKEN
    const siteId = process.env.NETLIFY_SITE_ID
    // NOTE: Non-collaborators PRs don't pass GitHub secrets to GitHub Actions.
    if (!(netlifyAuthToken && siteId)) {
      process.stdout.write('Netlify credentials not provided, not deployable')
      return
    }
    const dir = inputs.publishDir()
    const deployMessage: string | undefined = inputs.deployMessage()
    const productionBranch: string | undefined = inputs.productionBranch()
    const enablePullRequestComment: boolean = inputs.enablePullRequestComment()
    const enableCommitComment: boolean = inputs.enableCommitComment()
    const overwritesPullRequestComment: boolean = inputs.overwritesPullRequestComment()
    const netlifyConfigPath: string | undefined = inputs.netlifyConfigPath()
    const isDraft: boolean =
      productionBranch === undefined ||
      context.ref !== `refs/heads/${productionBranch}`

    // Create Netlify API client
    const netlifyClient = new NetlifyAPI(netlifyAuthToken)
    // Resolve publish directory
    const deployFolder = path.resolve(process.cwd(), dir)
    // Deploy to Netlify
    const deploy = await netlifyClient.deploy(siteId, deployFolder, {
      draft: isDraft,
      message: deployMessage,
      configPath: netlifyConfigPath
    })
    // Create a message
    const message = isDraft
      ? `ðŸš€ Deployed on ${deploy.deploy.deploy_ssl_url}`
      : `ðŸŽ‰ Published on ${deploy.deploy.ssl_url} as production\nðŸš€ Deployed on ${deploy.deploy.deploy_ssl_url}`
    // Print the URL
    process.stdout.write(`${message}\n`)

    // Set the deploy URL to outputs for GitHub Actions
    core.setOutput(
      'deploy-url',
      isDraft ? deploy.deploy.deploy_ssl_url : deploy.deploy.ssl_url
    )

    // Get GitHub token
    const githubToken = inputs.githubToken()
    if (githubToken !== '') {
      const markdownComment = `${commentIdentifierString}\n${message}`

      // Create GitHub client
      const githubClient = new GitHub(githubToken)

      if (enableCommitComment) {
        const commitCommentParams = {
          owner: context.repo.owner,
          repo: context.repo.repo,
          // eslint-disable-next-line @typescript-eslint/camelcase
          commit_sha: context.sha,
          body: markdownComment
        }
        // TODO: Remove try
        // NOTE: try-catch is experimentally used because commit message may not be done in some conditions.
        try {
          // Comment to the commit
          await githubClient.repos.createCommitComment(commitCommentParams)
        } catch (err) {
          // eslint-disable-next-line no-console
          console.error(err, JSON.stringify(commitCommentParams, null, 2))
        }
      }

      // If it is a pull request and enable comment on pull request
      if (context.issue.number !== undefined && enablePullRequestComment) {
        let commentId: number | undefined = undefined
        if (overwritesPullRequestComment) {
          // Find issue comment
          commentId = await findIssueComment(githubClient)
        }

        // NOTE: if not overwrite, commentId is always undefined
        if (commentId !== undefined) {
          // Update comment of the deploy URL
          await githubClient.issues.updateComment({
            owner: context.issue.owner,
            repo: context.issue.repo,
            // eslint-disable-next-line @typescript-eslint/camelcase
            comment_id: commentId,
            body: markdownComment
          })
          return
        }

        // Comment the deploy URL
        await githubClient.issues.createComment({
          // eslint-disable-next-line @typescript-eslint/camelcase
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: markdownComment
        })
      }
    }
  } catch (error) {
    core.setFailed(error.message)
  }
}

run(defaultInputs)
